{"version":3,"sources":["components/ColorBlock.tsx","components/ColorBlocks.tsx","utils/colorMaker.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ColorBlock","color","className","style","backgroundColor","ColorBlocks","colors","totalColorCount","total","perVal","generatedColor","i","currentColor","Math","round","push","toString","padStart","sort","a","b","random","colorMaker","map","index","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iMAUeA,EAJ0B,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAF,OACvC,qBAAKC,UAAU,cAAcC,MAAO,CAACC,gBAAgB,GAAD,OAAKH,OCG5CI,EAPK,WAClB,IAAMC,ECFkB,SAACC,GAMzB,IAJA,IAAMC,EAAQD,EAAkB,EAAIA,EAAkB,IAEhDE,EANU,SAMWD,EACvBE,EAAiB,GACZC,EAAI,EAAGA,EAAIH,EAAOG,IAAM,CAE/B,IAAMC,EAAeC,KAAKC,MAAML,GAAWE,EAAI,IAC/CD,EAAeK,KAAf,WAAwBH,EAAaI,SAAS,IAAIC,SAAS,EAAG,OAIhE,OADsBP,EAAeQ,MAAK,SAACC,EAAGC,GAAJ,MAAU,GAAMP,KAAKQ,YDVhDC,CAAW,OAC1B,OAAO,qBAAKpB,UAAU,iBAAf,SACJI,EAAOiB,KAAI,SAACtB,EAAOuB,GAAR,OAAkB,cAAC,EAAD,CAAwBvB,MAAOA,GAAduB,S,MEKpCC,MARf,WACE,OACE,qBAAKvB,UAAU,MAAf,SACE,cAAC,EAAD,OCQSwB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.25402441.chunk.js","sourcesContent":["import { FC } from 'react';\n\ninterface IColorBlockProps {\n  color: string;\n}\n\nconst ColorBlock: FC<IColorBlockProps> = ({color}) => (\n  <div className='color-block' style={{backgroundColor: `${color}`}}></div>\n)\n\nexport default ColorBlock;","import { colorMaker } from '../utils/colorMaker';\nimport ColorBlock from './ColorBlock';\n \nconst ColorBlocks = () => {\n  const colors = colorMaker(32768);\n  return <div className='blocks-wrapper'>\n    {colors.map((color, index) => <ColorBlock key={index} color={color}/>)}\n    </div>\n}\n\nexport default ColorBlocks;","const fullColor = 0xFFFFFF;\n\nexport const colorMaker = (totalColorCount:number) => {\n  // if total count is less than 0, then the default value is 256\n  const total = totalColorCount > 0 ? totalColorCount : 0xFF;\n  //divide the full color into total parts\n  const perVal = fullColor / total;\n  let generatedColor = [];\n  for( let i = 0; i < total; i++ ) {\n    // get the color hex code from each part\n    const currentColor = Math.round(perVal * ( i + 1 ));\n    generatedColor.push(`#${currentColor.toString(16).padStart(6, '0')}`);\n  }\n  //shuffle the array\n  const shuffledColor = generatedColor.sort((a, b) => 0.5 - Math.random());\n  return shuffledColor;\n}","import ColorBlocks from './components/ColorBlocks';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ColorBlocks />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}